# -*- coding: utf-8 -*-
"""RNN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DOXxOp95B1jPKsX0yJY2WKcXpnvCnqHa
"""

# Let`s import all packages that we may need:

import sys 
import numpy as np # linear algebra
from scipy.stats import randint
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv), data manipulation as in SQL
import matplotlib.pyplot as plt # this is used for the plot the graph 
import seaborn as sns # used for plot interactive graph. 
from sklearn.model_selection import train_test_split # to split the data into two parts
import sklearn # use for cross validation
from sklearn.preprocessing import StandardScaler # for normalization
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline # pipeline making
from sklearn.model_selection import cross_val_score
from sklearn.feature_selection import SelectFromModel
from sklearn import metrics # for the check the error and accuracy of the model
from sklearn.metrics import mean_squared_error,r2_score

## for Deep-learing:
import keras
from keras.layers import Dense
from keras.models import Sequential
from keras.utils import to_categorical
from keras.optimizers import SGD 
from keras.callbacks import EarlyStopping
from keras.utils import np_utils
import itertools
from keras.layers import LSTM
from keras.layers.convolutional import Conv1D
from keras.layers.convolutional import MaxPooling1D
from keras.layers import Dropout

#inputing the data
df = pd.read_excel('residuals.xlsx', 
                 parse_dates={'dt' : ['Year']}, infer_datetime_format=True, 
                  na_values=['nan','?'], index_col='dt')
#in the above procedure, we have parsed the year column in the dt dataframe, treated nan values as numpy NaN and set the index to dt to make it a time series data

df.head()

df.info()

df.dtypes

df.shape

df.describe

df.columns

#dealing with missing values
#making a function to append all the columns with missing values in one list
def missing(x):
  dropping_all_list = []
  for j in range(0,2):
    if not df.iloc[:, j].notnull().all():
      return dropping_all_list.append(j)

a = missing(df)
print(a)

#filling the missing values with mean values
def filling_mean(y):
  for j in range(0,7):
    return df.iloc[:,j].fillna(df.iloc[:,j].mean())

b = filling_mean(df)
print (b)

# another sanity check to make sure that there are not more any nan
df.isnull().sum()

#data visualization
df.Residuals.resample('Y').sum().plot(title='Residuals from ARIMA model') 
#df.Global_active_power.resample('D').mean().plot(title='Global_active_power resampled over day', color='red') 
plt.tight_layout()
plt.show()   

df.Residuals.resample('Y').mean().plot(title='''Residuals from ARIMA model's mean''', color='red') 
plt.tight_layout()
plt.show()

### Below I show mean and std of 'Global_intensity' resampled over day 
r = df.Residuals.resample('Y').agg(['mean', 'std'])
r.plot(subplots = True, title='Residuals resampled over day')
plt.show()

### Sum of 'Actual Subscribers' resampled yearly
# Sum of 'Actual Subscribers' resampled yearly
df['Actual Scubscribers'].resample('Y').mean().plot(kind='bar')
plt.xticks(rotation=60)
plt.ylabel('Actual Subscribers')
plt.title('Actual Subscribers (averaged over year)')
plt.show()

## Mean of 'Actual Subscribers' resampled over quarter
df['Actual Scubscribers'].resample('Q').mean().plot(kind='bar')
plt.xticks(rotation=60)
plt.ylabel('Actual Subscribers')
plt.title('Averaged Subscribers (averaged over quarter)')
plt.show()

### Sum of 'Actual Subscribers' resampled yearly
# Sum of 'Actual Subscribers' resampled yearly
df['Residuals'].resample('Y').mean().plot(kind='bar')
plt.xticks(rotation=60)
plt.ylabel('Residuals')
plt.title('Residuals (averaged over year)')
plt.show()

## Mean of 'Actual Subscribers' resampled over quarter
df['Residuals'].resample('Q').mean().plot(kind='bar')
plt.xticks(rotation=60)
plt.ylabel('Residuals')
plt.title('Residuals (averaged over quarter)')
plt.show()

# Below I compare the mean of different featuresresampled over day. 
# specify columns to plot
cols = [0, 1]
i = 1
groups=cols
values = df.resample('Y').mean().values
# plot each column
plt.figure(figsize=(15, 10))
for group in groups:
	plt.subplot(len(cols), 1, i)
	plt.plot(values[:, group])
	plt.title(df.columns[group], y=0.75, loc='right')
	i += 1
plt.show()

## resampling over week and computing mean
df['Actual Scubscribers'].resample('Y').mean().plot(color='y', legend=True)
df['Residuals'].resample('Y').mean().plot(color='r', legend=True)

#finding the correlation 
z = sns.heatmap(df)

# Correlations among columns
plt.matshow(df.corr(method='spearman'),vmax=1,vmin=-1,cmap='PRGn')
plt.title('without resampling', size=15)
plt.colorbar()
plt.show()

#machine learning 
#I will frame the supervised learning problem as predicting the Global_active_power at the current time (t) given the Global_active_power measurement and other features at the prior time step.
def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
	n_vars = 1 if type(data) is list else data.shape[1]
	dff = pd.DataFrame(data)
	cols, names = list(), list()
	# input sequence (t-n, ... t-1)
	for i in range(n_in, 0, -1):
		cols.append(dff.shift(i))
		names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]
	# forecast sequence (t, t+1, ... t+n)
	for i in range(0, n_out):
		cols.append(dff.shift(-i))
		if i == 0:
			names += [('var%d(t)' % (j+1)) for j in range(n_vars)]
		else:
			names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]
	# put it all together
	agg = pd.concat(cols, axis=1)
	agg.columns = names
	# drop rows with NaN values
	if dropnan:
		agg.dropna(inplace=True)
	return agg

#for quick computational calculations, we have reesampled data hourly
#df_resample = df.resample('h').mean() 
#df_resample.shape

# * Note: I scale all features in range of [0,1].

## If you would like to train based on the resampled data (over hour), then used below
values = df.values 
# integer encode direction
# ensure all data is float
#values = values.astype('float32')
# normalize features
scaler = MinMaxScaler(feature_range=(0, 1))
scaled = scaler.fit_transform(values)
# frame as supervised learning
reframed = series_to_supervised(scaled, 1, 1)
reframed

# split into train and test sets
values = reframed.values

n_train_time = 365*24
train = values[:n_train_time, :]
test = values[n_train_time:, :]
##test = values[n_train_time:n_test_time, :]
# split into input and outputs
train_X, train_y = train[:, :-1], train[:, -1]
test_X, test_y = test[:, :-1], test[:, -1]
# reshape input to be 3D [samples, timesteps, features]
train_X = train_X.reshape((train_X.shape[0], 1, train_X.shape[1]))
test_X = test_X.reshape((test_X.shape[0], 1, test_X.shape[1]))
print(train_X.shape, train_y.shape, test_X.shape, test_y.shape)

model = Sequential()
model.add(LSTM(100, input_shape=(train_X.shape[1], train_X.shape[2])))
#model.add(Dropout(0.2))
#model.add(LSTM(70))
model.add(Dropout(0.3))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')



# fit network
xy = model.fit(train_X, train_y, epochs=20, batch_size=70, validation_data=(test_X, test_y), verbose=2, shuffle=False)
#xy
# summarize history for loss
#plt.plot(history.history['loss'])
#plt.plot(history.history['val_loss'])
#plt.title('model loss')
#plt.ylabel('loss')
#plt.xlabel('epoch')
#plt.legend(['train', 'test'], loc='upper right')
#plt.show()

test_X

# make a prediction
yhat = model.predict(test_X)
test_X = test_X.reshape((test_X.shape[0], 7))
#invert scaling for forecast
inv_yhat = np.concatenate((yhat, test_X[:, -5:]), axis=1)
inv_yhat = scaler.inverse_transform(inv_yhat)
inv_yhat = inv_yhat[:,0]
# invert scaling for actual
test_y = test_y.reshape((len(test_y), 1))
inv_y = np.concatenate((test_y, test_X[:, -2:]), axis=1)
inv_y = scaler.inverse_transform(inv_y)
inv_y = inv_y[:,0]
# calculate RMSE
rmse = np.sqrt(mean_squared_error(inv_y, inv_yhat))
print('Test RMSE: %.3f' % rmse)

aa=[x for x in range(200)]
plt.plot(aa, inv_y[:200], marker='.', label="actual")
plt.plot(aa, inv_yhat[:200], 'r', label="prediction")
plt.ylabel('Global_active_power', size=15)
plt.xlabel('Time step', size=15)
plt.legend(fontsize=15)
plt.show()

