# -*- coding: utf-8 -*-
"""ARIMA function.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qvq4OQb6AHfatnK9l1u7_G7m6WszYGiA
"""

# -*- coding: utf-8 -*-
"""ARIMA_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jYt7_v91APJyWjyWDYPOn6cAziTBU--2
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#defining the ARIMA function
def hybrid(dataset):
  dataset=pd.read_excel('T-Series subs.xlsx')
  dataset.head(5)

  #parse string to date-time format
  #for i in dataset:
  #  if i == "Date" or "Date/Time" or "Month" or "Year":
  #    continue
    
  dataset['Date/Time'] = pd.to_datetime(dataset['Date/Time'], infer_datetime_format=True)
  indexeddataset = dataset.set_index(["Date/Time"])

  from datetime import datetime
  indexeddataset.head(5)

  #plotting
  plt.xlabel("Date/Time")
  plt.ylabel('Subscribers')
  plt.plot(indexeddataset)

  #rolling statistics
  rolmean = indexeddataset.rolling(window=12).mean()
  rolstd = indexeddataset.rolling(window=12).std()
  print(rolmean, rolstd)

  #plot rolling statistics
  orig = plt.plot(indexeddataset, color='Blue', label = 'Original')
  mean = plt.plot(rolmean,color = 'Green', label = "Rolling Mean")
  stan = plt.plot(rolstd,color="Red", label = "Rolling Standard Deviation")
  plt.legend(loc = "Best")
  plt.title("Original vs Rolling Statistics")
  plt.show(block=False)

  #performing ad-test
  from statsmodels.tsa.stattools import adfuller

  print("Results from AD-Fuller test:")
  dftest = adfuller(indexeddataset['Subscribers'],autolag = 'AIC')

  dfoutput = pd.Series(dftest[0:4], index=['Test Statistics','p-Value','Lags Used','Number of observations used'])
  for key,value in dftest[4].items():
    dfoutput['Critical Value (%s)'%key] = value
  
    print(dfoutput)

  #estimating trends
  indexeddataset_logscale = np.log(indexeddataset)
  plt.plot(indexeddataset_logscale)

  movingaverage = indexeddataset_logscale.rolling(window=12).mean()
  movingstd = indexeddataset_logscale.rolling(window=12).std()
  plt.plot(indexeddataset_logscale)
  plt.plot(movingaverage,color='red')

  new = indexeddataset_logscale - movingaverage
  #removing NaN values
  new.dropna(inplace=True)
  new.head(10)

  #creating a function to test the stationarity
  from statsmodels.tsa.stattools import adfuller
  def test_stationarity(timeseries):
    #rolling statistics
    movingaverage = timeseries.rolling(window=12).mean()
    movingSTD = timeseries.rolling(window=12).std()
  
    #plot the rolls
    orig = plt.plot(timeseries,color='blue',label="Original")
    mean = plt.plot(movingaverage, color = 'green', label = "Moving Average")
    stan = plt.plot(movingSTD, color = 'pink',label = "Moving Standard Deviation")
    plt.legend(loc="best")
    plt.title('Original vs Rolling Statistics')
    plt.show(block=False)
  
    #Perform dicky fuller test
    print("Results from AD fuller tests are:")
    dftest = adfuller(timeseries["Subscribers"],autolag="AIC")
    dfoutput = pd.Series(dftest[0:4], index=['Test Statistics','p-Value','Lags Used','Number of observations used'])
    for key,value in dftest[4].items():
      dfoutput['Critical Value(%s)'%key] = value
    print (dfoutput)

  test_stationarity(new)

  exponentialdecayaverage = indexeddataset_logscale.ewm(halflife=12,min_periods=0,adjust=True).mean()
  plt.plot(indexeddataset_logscale)
  plt.plot(exponentialdecayaverage,color='Red')

  new1 = indexeddataset_logscale - exponentialdecayaverage
  test_stationarity(new1)

  datasetlogshifting = indexeddataset_logscale-indexeddataset_logscale.shift()
  plt.plot(datasetlogshifting)

  datasetlogshifting.dropna(inplace=True)
  test_stationarity(datasetlogshifting)

  from statsmodels.tsa.seasonal import seasonal_decompose
  decomposition = seasonal_decompose(indexeddataset_logscale)

  trend = decomposition.trend
  seasonal = decomposition.seasonal
  residual = decomposition.resid

  plt.subplot(411)
  plt.plot(indexed_dataset_logscale, label = "Original")
  plt.legend(loc="Best")
  plt.subplot(412)
  plt.plot(trend, label="Trend")
  plt.legend(loc="Best")
  plt.subplot(413)
  plt.plot(seasonal,label="Seasonal")
  plt.legend(loc="Best")
  plt.subplot(414)
  plt.plot(residual, label = "Residual")
  plt.legend(loc = "Best")
  plt.tight_layout()

  decomposedlogdata = residual
  decomposedlogdata.dropna(inplace=True)
  test_stationarity(decomposedlogdata)

  #ACF and PACF
  from statsmodels.tsa.stattools import acf,pacf

  lag_acf = acf(datasetlogshifting,nlags=20)
  lag_pacf = pacf(datasetlogshifting,nlags=25,method='ols')

  #Plot ACF
  plt.subplot(121)
  plt.plot(lag_acf)
  plt.axhline(y=0,linestyle='--',color='gray')
  plt.axhline(y=-1.96/np.sqrt(len(datasetlogshifting)),linestyle='--',color='gray')
  plt.axhline(y=1.96/np.sqrt(len(datasetlogshifting)),linestyle='--',color='gray')
  plt.title("Auto-Correlation Function")

  #Plot PACF
  plt.subplot(121)
  plt.plot(lag_pacf)
  plt.axhline(y=0,linestyle='--',color='gray')
  plt.axhline(y=-1.96/np.sqrt(len(datasetlogshifting)),linestyle='--',color='gray')
  plt.axhline(y=1.96/np.sqrt(len(datasetlogshifting)),linestyle='--',color='gray')
  plt.title("Partial Auto-Correlation Function")
  plt.tight_layout()

  from statsmodels.tsa.arima_model import ARIMA

  #AR model 
  model = ARIMA(indexeddataset_logscale, order=(2,1,2))
  results_AR = model.fit(disp=-1)
  plt.plot(datasetlogshifting)
  plt.plot(results_AR.fittedvalues,color='red')
  plt.title('RSS: %.4f'% sum((results_AR.fittedvalues-datasetlogshifting['Subscribers'])**2))
  print("Plotting AR model")

  #MA model
  model = ARIMA(indexeddataset_logscale,order=(0,1,2))
  results_MA = model.fit(disp=-1)
  plt.plot(datasetlogshifting)
  plt.plot(results_MA.fittedvalues,color = "red")
  plt.title('RSS:%.4f'%sum((results_MA.fittedvalues-datasetlogshifting["Subscribers"])**2))
  print("Plotting MA model")

  model = ARIMA(indexeddataset_logscale,order=(2,1,2))
  results_ARIMA = model.fit(disp=-1)
  plt.plot(datasetlogshifting)
  plt.plot(results_ARIMA.fittedvalues,color="red")
  plt.title("RSS:%.4f"%sum((results_ARIMA.fittedvalues-datasetlogshifting["Subscribers"])**2))

  predictions_ARIMA_diff = pd.Series(results_ARIMA.fittedvalues, copy=True)
  print(predictions_ARIMA_diff)

  #converting to cumulative sum
  predictions_ARIMA_diff_cum = predictions_ARIMA_diff.cumsum()
  print(predictions_ARIMA_diff_cum)

  predictions_ARIMA_log = pd.Series(indexeddataset_logscale["Subscribers"].ix[0], index = indexeddataset_logscale.index)
  predictions_ARIMA_log = predictions_ARIMA_log.add(predictions_ARIMA_diff_cum,fill_value=0)
  predictions_ARIMA_log

  predictions_ARIMA = np.exp(predictions_ARIMA_log)
  plt.plot(indexeddataset)
  plt.plot(predictions_ARIMA)

  indexeddataset_logscale

  results_ARIMA.plot_predict(1,265)
  x = results_ARIMA.forecast(steps=120)

  x[1]

  len(x[1])

  a = np.exp(x[1])

  return a

a = hybrid('T-Series subs.xlsx')
print (a)

